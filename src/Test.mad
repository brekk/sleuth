import { Left, Right } from "Either"
import File from "File"
import { always } from "Function"
import IO from "IO"
import String from "String"
import Term from "Terminal"
import Test from "Test"
import Wish from "Wish"



printReport = (name, i) => `${name}\n  â†³ ${
  pipe(
    show,
    Term.ansiColor([Term.ansi.FormatBold, Term.ansi.FGBrightYellow]),
  )(i)
}`

createTest = (name, fn, i, o) => Test.test(printReport(name, i), () => Test.assertEquals(fn(i), o))

export report = (fn, name, listInOut) => pipe(
  map(where { #[i, o] => createTest(name, fn, i, o) }),
)(listInOut)
caseN2 :: (a -> b -> c) -> #[a, b] -> c
export caseN2 = (fn, pair) => where(pair) {
  #[a, b] =>
    fn(a, b)
}
caseN3 :: (a -> b -> c -> d) -> #[a, b, c] -> d
export caseN3 = (fn, t3) => where(t3) {
  #[a, b, c] =>
    fn(a, b, c)
}
caseN4 :: (a -> b -> c -> d -> e) -> #[a, b, c, d] -> e
export caseN4 = (fn, t4) => where(t4) {
  #[a, b, c, d] =>
    fn(a, b, c, d)
}
caseN5 :: (a -> b -> c -> d -> e -> f) -> #[a, b, c, d, e] -> f
export caseN5 = (fn, t5) => where(t5) {
  #[a, b, c, d, e] =>
    fn(a, b, c, d, e)
}
templateChainTest = (name, fn, i, o) => Test.test(
  printReport(name, i),
  () => pipe(
    fn,
    chain(Test.assertEquals(o)),
  )(i),
)

export asyncReport = (fn, name, listInOut) => pipe(
  map(where { #[i, o] => templateChainTest(name, fn, i, o) }),
)(listInOut)
