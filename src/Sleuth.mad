import Char from "Char"
import List from "List"
import { Just } from "Maybe"
import String from "String"



_sliceStringToEnd :: Integer -> String -> String
_sliceStringToEnd = (i, x) => String.slice(i, String.length(x), x)

_sliceListToEnd :: Integer -> List a -> List a
_sliceListToEnd = (i, x) => List.slice(i, List.length(x), x)

_matchChar :: Char -> Char -> Boolean
_matchChar = (d, c) => d == '.' || d == c

_matchSuffix :: Boolean -> List Char -> List Char -> Boolean
_matchSuffix = (anything, pattern, input) => {
  post = _sliceListToEnd(2, pattern)
  return where(#[pattern, input]) {
    #[[a, ..._], [a2, ...z2]] =>
      (_matchChar(a, a2) && _matchCharList(anything ? pattern : post, z2))
        || _matchCharList(post, input)

    _ =>
      _matchCharList(post, input)
  }
}

_matchStar = _matchSuffix(true)
_matchQuestion = _matchSuffix(false)

_matchCharList :: List Char -> List Char -> Boolean
_matchCharList = (pattern, input) => {
  pLen = List.length(pattern)
  iLen = List.length(input)
  suffix = List.nth(1, pattern)
  return if (suffix == Just('?')) {
    _matchQuestion(pattern, input)
  } else if (suffix == Just('*')) {
    _matchStar(pattern, input)
  } else if (pLen == 1 && pattern == ['$'] && iLen == 0) {
    true
  } else if (pLen > 0 && iLen == 0) {
    false
  } else {
    where(#[pattern, input]) {
      #[[a, ...z], [a2, ...z2]] =>
        _matchChar(a, a2) && _matchCharList(z, z2)

      _ =>
        true
    }
  }
}

match :: String -> String -> Boolean
export match = (pattern, input) => pipe(
  _matchCharList(String.toList(pattern)),
)(String.toList(input))

search :: String -> String -> Boolean
export search = (pattern, input) => if (String.startsWith("^", pattern)) {
  match(_sliceStringToEnd(1, pattern), input)
} else {
  match(".*" ++ pattern, input)
}
